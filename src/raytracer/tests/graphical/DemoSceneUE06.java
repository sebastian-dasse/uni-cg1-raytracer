package raytracer.tests.graphical;

import raytracer.Color;
import raytracer.Constants;
import raytracer.Renderer;
import raytracer.World;
import raytracer.camera.Camera;
import raytracer.camera.PerspectiveCamera;
import raytracer.geometry.Node;
import raytracer.geometry.Sphere;
import raytracer.light.PointLight;
import raytracer.material.DayAndNightMaterial;
import raytracer.material.LambertMaterial;
import raytracer.math.Point3;
import raytracer.math.Transform;
import raytracer.math.Vector3;
import raytracer.texture.ImageTexture;
import raytracer.texture.InterpolatedImageTexture;
import raytracer.texture.Texture;
import raytracer.ui.ShowImage;

/**
* Generates and displays <code>Renderer</code> objects for demo scenes as demanded in task 6.
* 
* @author Maxim Novichkov
* @author Sebastian Dass&eacute;
* @author Simon Lischka
*
*/
public class DemoSceneUE06 {

	/**
	 * Shows all the demo scenes in individual <code>JFrame</code> windows.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		
		final Renderer[] tracers = new Renderer[]{
				scene1(), 
				scene2(), 
				scene3(), 
				scene4(), 
				scene5()
		};
		for (int i = 0; i < tracers.length; i++) {
			ShowImage.from(tracers[i], 50 * i, 25 * i);
		}
	}

	/**
	 * Generates a scene showing the earth with a high-resolution texture.
	 * 
	 * @return The <code>Renderer</code> generated by the test method.
	 */
	private static Renderer scene1() {
		final String path = "textures/earth1.jpg";
		final Texture imgTexture = new ImageTexture(path);
		final World world = new World(new Color(0, 0, 0), new Color(0.0, 0.0, 0.0), Constants.INDEX_OF_REFRACTION_VACUUM);
		world.addElements(
				new Node(
						new Sphere(
//								new SingleColorMaterial(imgTexture)
								new LambertMaterial(imgTexture)
						), 
						new Transform()
				)
		);
		world.addLights(new PointLight(new Color(1, 1, 1), new Point3(3, 3, 3), false));
		final Camera camera = new PerspectiveCamera(new Point3(2, 2, 2), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4.0);
		return new Renderer(world, camera, 10);
	}
	
	/**
	 * Generates a scene showing the earth with a low-resolution texture that is not interpolated.
	 * 
	 * @return The <code>Renderer</code> generated by the test method.
	 */
	private static Renderer scene2() {
		final String path = "textures/earth1-scaled.jpg";
		final Texture imgTexture = new ImageTexture(path);
		final World world = new World(new Color(0, 0, 0), new Color(0.0, 0.0, 0.0), Constants.INDEX_OF_REFRACTION_VACUUM);
		world.addElements(
				new Node(
						new Sphere(
//								new SingleColorMaterial(imgTexture)
								new LambertMaterial(imgTexture)
						), 
						new Transform()
				)
		);
		world.addLights(new PointLight(new Color(1, 1, 1), new Point3(3, 3, 3), false));
		final Camera camera = new PerspectiveCamera(new Point3(2, 2, 2), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4.0);
		return new Renderer(world, camera, 10);
	}
	
	/**
	 * Generates a scene showing the earth with an interpolated low-resolution texture.
	 * 
	 * @return The <code>Renderer</code> generated by the test method.
	 */
	private static Renderer scene3() {
		final String path = "textures/earth1-scaled.jpg";
		final Texture intImgTexture = new InterpolatedImageTexture(path);
		final World world = new World(new Color(0, 0, 0), new Color(0.0, 0.0, 0.0), Constants.INDEX_OF_REFRACTION_VACUUM);
		world.addElements(
				new Node(
						new Sphere(
//								new SingleColorMaterial(intImgTexture)
								new LambertMaterial(intImgTexture)
						), 
						new Transform()
				)
		);
		world.addLights(new PointLight(new Color(1, 1, 1), new Point3(3, 3, 3), false));
		final Camera camera = new PerspectiveCamera(new Point3(2, 2, 2), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4.0);
		return new Renderer(world, camera, 10);
	}
	
	/**
	 * Generates a scene showing the earth with a high-resolution texture. Depending on the amount of illumination for 
	 * a specific point the texture for day or night is shown.
	 * 
	 * @return The <code>Renderer</code> generated by the test method.
	 */
	private static Renderer scene4() {
		final Texture dayTexture = new ImageTexture("textures/earthDay.jpg");
		final Texture nightTexture = new ImageTexture("textures/earthNight.jpg");
		final World world = new World(new Color(0, 0, 0), new Color(0.0, 0.0, 0.0), Constants.INDEX_OF_REFRACTION_VACUUM);
		world.addElements(
				new Node(
						new Sphere(
								new DayAndNightMaterial(
										new LambertMaterial(dayTexture),
										new LambertMaterial(nightTexture)
								)
						), 
						new Transform()
				)
		);
		world.addLights(
				new PointLight(
						new Color(1, 1, 1), 
						new Point3(15, 0, -4), 
						false
				)
		);
		final Camera camera = new PerspectiveCamera(new Point3(2, 2, 2), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4.0);
		return new Renderer(world, camera, 10);
	}
	
	/**
	 * Generates a scene showing the earth with a high-resolution texture. Depending on the amount of illumination for 
	 * a specific point the texture for day or night is shown.
	 * 
	 * @return The <code>Renderer</code> generated by the test method.
	 */
	private static Renderer scene5() {
		final World world = new World(new Color(0, 0, 0), new Color(0.0, 0.0, 0.0), Constants.INDEX_OF_REFRACTION_VACUUM);
		world.addElements(
//				new Node(
//						null 
//						, 
//						new Transform()
//				)
		);
		world.addLights(
				
		);
		final Camera camera = new PerspectiveCamera(new Point3(2, 2, 2), new Vector3(-1, -1, -1), new Vector3(0, 1, 0), Math.PI / 4.0);
		return new Renderer(world, camera, 10);
	}
}
